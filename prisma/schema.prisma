datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id                 Int          @id @default(autoincrement())
  username           String?      @unique
  name               String
  email              String       @unique
  password           String
  role               String
  avatars            Avatar[]     
  scripts            Script[]     
  schedules          Schedule[]   
  conversations      Conversation[]  @relation("UserConversations")
  messages           Message[]    @relation("MessageSender") // Sent messages
  receivedMessages   Message[]    @relation("MessageSendee") // Received messages
  readReceipts       ReadReceipt[]
}

model Conversation {
  id           Int          @id @default(autoincrement())
  participants User[]       @relation("UserConversations")
  messages     Message[]    // Relationship between Conversation and Message
}

model Message {
  id              Int          @id @default(autoincrement())
  text            String
  timestamp       DateTime     @default(now())
  status          String       // New field for message status (e.g., 'sent', 'delivered', 'read')
  conversationId  Int          
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  
  userId          Int          // Sender's ID
  user            User         @relation("MessageSender", fields: [userId], references: [id])
  
  sendeeId        Int?         // Sendee's ID (nullable for group messages)
  sendee          User?        @relation("MessageSendee", fields: [sendeeId], references: [id])

  readReceipts    ReadReceipt[] // Relationship to ReadReceipt

  @@index([conversationId, userId]) // Creating a compound index
}

model ReadReceipt {
  id              Int          @id @default(autoincrement())
  messageId       Int
  userId          Int
  timestamp       DateTime     @default(now())
  
  message         Message      @relation(fields: [messageId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
  
  @@unique([messageId, userId]) // Ensure a user can only mark a message as read once
}

model Avatar {
  id        Int    @id @default(autoincrement())
  url       String
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
}

model Script {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
